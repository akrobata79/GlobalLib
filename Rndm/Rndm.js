/** Rndm (JS) by Grant Skinner. June 18, 2011* based on Rndm (AS3) by Grant Skinner. Jan 15, 2008* Visit http://github.com/gskinner for documentation, updates and examples.*** Copyright (c) 2011 Grant Skinner** Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:** The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.*/(function(window) {Rndm = function(seed) {	if (isNaN(seed)) { seed = Math.random()*0xFFFFFFF|0; }  this._seed = this._currentSeed = seed;}var p = Rndm.prototype;	// static interface:	// NOTE: for usage information, look at the instance methods below.	Rndm._instance = null;	Rndm.getInstance = function() {		if (Rndm._instance == null) { Rndm._instance = new Rndm(); }		return Rndm._instance;	}	Rndm.getSeed = function() {		return Rndm._instance.getSeed();	}		Rndm.setSeed = function(value) {		Rndm._instance.setSeed(value);	}	Rndm.getCurrentSeed = function() {		return Rndm._instance.getCurrentSeed();	}	Rndm.random = function() {		return Rndm._instance.random();	}	Rndm.float = function(min,max) {		return Rndm._instance.float(min,max);	}	Rndm.boolean = function(chance) {		return Rndm._instance.boolean(chance);	}	Rndm.sign = function(chance) {		return Rndm._instance.sign(chance);	}	Rndm.bit = function(chance) {		return Rndm._instance.bit(chance);	}	Rndm.integer = function(min,max) {		return Rndm._instance.integer(min,max);	}	Rndm.shuffle = function(array) {		return Rndm._instance.shuffle(array);	}	Rndm.item = function(array) {		return Rndm._instance.item(array);	}	Rndm.reset = function() {		Rndm._instance.reset();	}// private properties:	p._seed = 0;	p._currentSeed = 0;// public methods:	// gets the base seed	p.getSeed = function() {		return this._seed;	}	// seed = Math.random()*0xFFFFFF; // sets a random seed	// seed = 50; // sets a static seed	p.setSeed = function(value) {		this._seed = this._currentSeed = value;	}	// gets the current seed	p.getCurrentSeed = function() {		return this._currentSeed;	}	// reset(); // resets the number series, retaining the same seed	p.reset = function() {		this._currentSeed = this._seed;	}	// random(); // returns a number between 0-1 exclusive.	p.random = function() {		return (this._currentSeed = (this._currentSeed * 16807) % 2147483647)/0x7FFFFFFF+0.000000000233;	}	// float(50); // returns a number between 0-50 exclusive	// float(20,50); // returns a number between 20-50 exclusive	p.float = function(min,max) {		if (isNaN(max)) { max = min; min=0; }		return this.random()*(max-min)+min;	}	// boolean(); // returns true or false (50% chance of true)	// boolean(0.8); // returns true or false (80% chance of true)	p.boolean = function(chance) {		if (isNaN(chance)) { chance = 0.5; }		return (this.random() < chance);	}	// sign(); // returns 1 or -1 (50% chance of 1)	// sign(0.8); // returns 1 or -1 (80% chance of 1)	p.sign = function(chance) {		if (isNaN(chance)) { chance = 0.5; }		return (this.random() < chance) ? 1 : -1;	}	// bit(); // returns 1 or 0 (50% chance of 1)	// bit(0.8); // returns 1 or 0 (80% chance of 1)	p.bit = function(chance) {		if (isNaN(chance)) { chance = 0.5; }		return (this.random() < chance) ? 1 : 0;	}	// integer(50); // returns an integer between 0-49 inclusive	// integer(20,50); // returns an integer between 20-49 inclusive	p.integer = function(min,max) {		if (isNaN(max)) { max = min; min=0; }		// Need to use floor instead of bit shift to work properly with negative values:		return Math.floor(this.float(min,max));	}	// shuffle(arr); // shuffles the items in the specified array. Modifies the original array.	// arr2 = shuffle(arr1.slice()); // to get a new shuffled array w/o modifying original.	// no allocations or array resizing.	p.shuffle = function(array) {		var l = array.length;		for (var i=0; i<l; i++) {			var j = l*this.random()|0;			if (j==i) { continue; }			var item = array[j];			array[j] = array[i];			array[i] = item;		}		return array;	}	// item([1,3,5]); // returns a random item from the array. Does not modify the original array.	p.item = function(array) {		return array[array.length*this.random()|0];	}	p.toString = function() {		return "[Rndm]";	}	Rndm._instance = new Rndm();window.Rndm = Rndm;}(window));